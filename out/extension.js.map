{"version":3,"file":"extension.js","mappings":"0BAAA,MAAMA,EAAS,EAAQ,MACjB,cAAEC,GAAkB,EAAQ,KA8BlCC,EAAOC,QAAU,CACbC,SA7BJ,SAAkBC,GACdC,QAAQC,IAAI,+DAEZ,IAAIC,EAAaR,EAAOS,SAASC,gBAAgB,4BAA4BC,iBACzE,MAAMC,EAASZ,EAAOa,OAAOC,iBAC7B,IAAKF,EAED,YADAZ,EAAOa,OAAOE,iBAAiB,oBAInC,MAAMC,QAAkBf,IAElBgB,EAAWL,EAAOM,UAAUC,MAClCP,EAAOQ,MAAKC,IAERA,EAAYC,OAAOL,EAAUD,EAAU,IACxCO,MAAKC,IACCA,GACDxB,EAAOa,OAAOE,iBAAiB,uBACnC,GAER,IAEAV,EAAQoB,cAAcC,KAAKlB,EAC/B,EAMImB,WAJJ,WAAuB,E,gBC7BvB,MAAMC,EAAK,gBACLC,EAAO,EAAQ,KAuCrB3B,EAAOC,QAAU,CAAEF,cArCnBU,iBACE,MAAMmB,EAAWD,EAAKE,KAAKC,UAAW,OAAQ,aACxCC,EAAWC,KAAKC,YAAYP,EAAGQ,SAASN,EAAU,SAElDO,EAASC,OAAOC,KAAKN,GAAUO,QAAOC,GAAmB,eAAVA,GAAoC,YAAVA,IACzEC,EAAaT,EAAqB,WAAEU,KAAIC,GAAaA,EAAUC,OAC/DC,EAASb,EAAkB,QAAEU,KAAII,GAASA,EAAMF,OAEtD,IAAIG,EAAgB,CAAC,eACjBC,EAAc,IAAIC,IAClBC,EAAed,EAAOe,KAAKC,MAAMD,KAAKE,SAAWjB,EAAOkB,SAE5D,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACd,IAANA,GAAWJ,KAAKE,SAAW,MAC3BH,EAAed,EAAOe,KAAKC,MAAMD,KAAKE,SAAWjB,EAAOkB,UAG5D,IAAIE,EAAgBxB,EAASkB,GAAcX,QAAOK,IAASI,EAAYS,IAAIb,EAAKA,QAChF,GAAIY,EAAcF,OAAS,EAAG,CAC1B,IAAII,EAAYF,EAAcL,KAAKC,MAAMD,KAAKE,SAAWG,EAAcF,SAASV,KAChFI,EAAYW,IAAID,GAEZH,EAAI,IAEJG,EAAY,GADUjB,EAAWU,KAAKC,MAAMD,KAAKE,SAAWZ,EAAWa,SACxCM,UAAUF,KAE7CX,EAActB,KAAKiC,EACvB,CACJ,CAEA,MAAMG,EAAchB,EAAOM,KAAKC,MAAMD,KAAKE,SAAWR,EAAOS,SAG7D,OAFAP,EAActB,KAAKoC,EAAYC,WAAW,KAAOD,EAAYD,OAASC,GAE/Dd,EAAcjB,KAAK,IAE5B,E,uBCtCA7B,EAAOC,QAAU6D,QAAQ,S,uBCAzB9D,EAAOC,QAAU6D,QAAQ,K,uBCAzB9D,EAAOC,QAAU6D,QAAQ,O,GCCrBC,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAalE,QAGrB,IAAID,EAAS+D,EAAyBG,GAAY,CAGjDjE,QAAS,CAAC,GAOX,OAHAoE,EAAoBH,GAAUlE,EAAQA,EAAOC,QAASgE,GAG/CjE,EAAOC,OACf,CCnB0BgE,CAAoB,I","sources":[".././extension.js",".././scripts/rajoyIpsumGenerator.js","../external commonjs \"vscode\"","../external node-commonjs \"fs\"","../external node-commonjs \"path\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["const vscode = require('vscode');\nconst { generateIpsum } = require('./scripts/rajoyIpsumGenerator.js');\n\nfunction activate(context) {\n    console.log('Congratulations, your extension \"rajoyipsum\" is now active!');\n\n    let disposable = vscode.commands.registerCommand('rajoyipsum.generateIpsum', async function () {\n        const editor = vscode.window.activeTextEditor;\n        if (!editor) {\n            vscode.window.showErrorMessage('No active editor');\n            return;\n        }\n    \n        const ipsumText = await generateIpsum(); // Asegúrate de que esta función devuelve una cadena\n        \n        const position = editor.selection.start; // Obtiene la posición actual del cursor\n        editor.edit(editBuilder => {\n            // Aquí ya no necesitas definir nuevamente 'position', úsala directamente\n            editBuilder.insert(position, ipsumText);\n        }).then(success => {\n            if (!success) {\n                vscode.window.showErrorMessage('Error inserting text');\n            }\n        });\n    });\n\n    context.subscriptions.push(disposable);\n}\n\nfunction deactivate() {}\n\nmodule.exports = {\n    activate,\n    deactivate\n};\n","const fs = require('fs').promises;\r\nconst path = require('path');\r\n\r\nasync function generateIpsum() {\r\n  const dataPath = path.join(__dirname, 'data', 'data.json');\r\n  const textData = JSON.parse(await fs.readFile(dataPath, 'utf8'));\r\n\r\n  const themes = Object.keys(textData).filter(theme => theme !== 'Conectores' && theme !== 'Finales');\r\n  const connectors = textData['Conectores'].map(connector => connector.text);\r\n  const finals = textData['Finales'].map(final => final.text);\r\n\r\n  let paragraphText = [\"Rajoy Ipsum\"];\r\n  let usedPhrases = new Set();\r\n  let currentTheme = themes[Math.floor(Math.random() * themes.length)];\r\n\r\n  for (let i = 0; i < 4; i++) {\r\n      if (i !== 0 && Math.random() > 0.66) {\r\n          currentTheme = themes[Math.floor(Math.random() * themes.length)];\r\n      }\r\n\r\n      let selectedTexts = textData[currentTheme].filter(text => !usedPhrases.has(text.text));\r\n      if (selectedTexts.length > 0) {\r\n          let textToAdd = selectedTexts[Math.floor(Math.random() * selectedTexts.length)].text;\r\n          usedPhrases.add(textToAdd);\r\n\r\n          if (i > 0) {\r\n              let randomConnector = connectors[Math.floor(Math.random() * connectors.length)];\r\n              textToAdd = `${randomConnector.trim()} ${textToAdd}`;\r\n          }\r\n          paragraphText.push(textToAdd);\r\n      }\r\n  }\r\n\r\n  const randomFinal = finals[Math.floor(Math.random() * finals.length)];\r\n  paragraphText.push(randomFinal.startsWith(\" \") ? randomFinal.trim() : randomFinal);\r\n\r\n  return paragraphText.join(' ');\r\n\r\n}\r\n\r\nmodule.exports = { generateIpsum };\r\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(12);\n"],"names":["vscode","generateIpsum","module","exports","activate","context","console","log","disposable","commands","registerCommand","async","editor","window","activeTextEditor","showErrorMessage","ipsumText","position","selection","start","edit","editBuilder","insert","then","success","subscriptions","push","deactivate","fs","path","dataPath","join","__dirname","textData","JSON","parse","readFile","themes","Object","keys","filter","theme","connectors","map","connector","text","finals","final","paragraphText","usedPhrases","Set","currentTheme","Math","floor","random","length","i","selectedTexts","has","textToAdd","add","trim","randomFinal","startsWith","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}